bool isValid(int x, int y, int n) 
    {
        if(x >= 0 && x < n && y >= 0 && y < n)
            return true;
        return false;
    }
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        // Code here
        int n = grid.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1, INT_MAX));
        
        dp[0][0] = grid[0][0];


        vector<vector<int>> dir = {{0,1},{0,-1},{1,0},{-1,0}};
        
                        
        priority_queue<pair<int, pair<int, int>>,vector<pair<int, pair<int,int>>>,greater<pair<int, pair<int, int>>> > pq; 
                        
        pq.push({grid[0][0],{0, 0}});
        
        while(!pq.empty()) {
            auto curr = pq.top();
            pq.pop();
            int i = curr.second.first;
            int j = curr.second.second;  
            
            for(int k = 0; k < 4; k++)
            {
                int x = i + dir[k][0];
                int y = j + dir[k][1];
                if(isValid(x, y, n) && (dp[i][j] + grid[x][y] < dp[x][y]))
                {
                    dp[x][y] = dp[i][j] + grid[x][y];
                    
                    pq.push({dp[x][y], {x, y}});
                }
                
            }
        }
        return dp[n-1][n-1];
    }
