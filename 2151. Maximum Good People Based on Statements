class Solution {
public:
    bool dfs(int x, vector<vector<int>>& arr){
        int n = arr.size();
        for(int i=0; i<n; i++){
            if((1<<i) & x){
                for(int j=0; j<n; j++){
                    if(arr[i][j] == 1 and !((1<<j)&x) or arr[i][j]==0 and ((1<<j)&x)){
                        return false;
                    }
                }
            }
        }
        return true;
    }
    int maximumGood(vector<vector<int>>& arr) {
        int ans = 0;
        int n = arr.size();
        for(int i=0; i < (1<<n); i++){
            if(dfs(i, arr)){
                ans = max(ans, __builtin_popcount(i));
            }
        }
        return ans;
    }
};
