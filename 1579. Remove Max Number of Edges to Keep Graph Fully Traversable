class UnionFind{
    int component;
    vector<int> parent;
public :
    UnionFind(int n){
        component = n;
        for(int i = 0; i <= n; i++){
            parent.push_back(i);
        }
    }
    bool unite(int a, int b){
        a = findParent(a);
        b = findParent(b);
        if(a == b){
            return false;
        }
        component--;
        parent[a] = b;
        return true;
    }
    int findParent(int node){
        if(parent[node] == node){
            return node;
        }
        return parent[node] = findParent(parent[node]);
    }
    bool united(){
        return (component == 1);
    }
};
class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        sort(edges.begin(), edges.end(), [] (vector<int> &a, vector<int> &b) { return a[0] > b[0]; });
        UnionFind alice(n);
        UnionFind bob(n);
        int ans = 0;
        for(auto it: edges){
            if(it[0] == 3){
                ans += (alice.unite(it[1], it[2]) | bob.unite(it[1], it[2]));
            }
            else if(it[0] == 2){
                ans += bob.unite(it[1], it[2]);
            }
            else{
                ans += alice.unite(it[1], it[2]);
            }
        }
        return ((alice.united() and bob.united()) ? (edges.size() - ans) : -1 ); 
    }
};
